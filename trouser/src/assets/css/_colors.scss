// Store all colors in this file, including for additional themes, to improve app consistency

// Store the actual colors as variables here to ensure actual color values are only specified once.
// Use the actual color names to keep the colors uniquely identifiable
$richBlackFogra29: #011C27;
$blueCrayola: #2176FF;
$blueJeans: #33A1FD;
$yellowSunglow: #FDCA40;
$yellowOrangeColorWheel: #F79824;

$gunmetal: hsla(227, 15%, 24%, 1);

// The master map, stores ALL colors used in the app
$colors: (
  // Top level colors, with simple names to ease access
  blackBlue: $richBlackFogra29,
  blue: $blueCrayola,
  lightBlue: $blueJeans,
  yellow: $yellowSunglow,
  orange: $yellowOrangeColorWheel,
  // Component colors, defining the default theme. For specific themes, create a new map with the name [theme name]-theme and then specify any colors you want to override from the default

  button:(
    border: $blueCrayola,
    background: white,
    font: $blueCrayola,
  ),

  button-disabled: (
    border: #444,
    background: #ddd,
    font: #444,
  ),

  button-hover:(
    border: $blueCrayola,
    background: scale_color(white, $lightness: -20%),
    font: $blueCrayola,
  ),

  // The button that should draw the user's attention on the screen to the suggested action
  button-primary: (
    border: $blueCrayola,
    background: $blueCrayola,
    font: white,

    dark-theme: (
      background: black,
    )
  ),

  button-primary-disabled: (
    border: scale_color($blueCrayola, $saturation: -50%),
    background: #ddd,
    font: scale_color($blueCrayola, $saturation: -50%),
  ),

  button-primary-hover:(
    border: scale_color($blueCrayola, $lightness:-20%),
    background: scale_color($blueCrayola, $lightness:-20%),
    font: white,
  ),

  button-text-only:(
    font: $blueCrayola,
  ),

  button-text-only-hover:(
    font: scale_color($blueCrayola, $lightness:-20%),
  ),

  menu:(
    background: white,
    icon: $gunmetal,
    icon-active: $blueCrayola,
    icon-hover: white,
    icon-hover-bg: $blueCrayola,
    border: $gunmetal,
  ),

  checkbox:(
    background: white,
    border: $gunmetal,
    selected-shadow: scale_color($blueCrayola, $alpha:-25%),
  ),

  float-input:(
    label: scale_color($gunmetal, $lightness:-25%),
    border: scale_color($gunmetal, $lightness:75%),
  ),

  float-input-hover: (
    border: $blueCrayola
  ),

  float-unit-unit:(
    background: scale_color($blueJeans, $lightness:90%)
  )
);

// The function to use the master map. You can use it like
// c(color) e.g. c(green) to get a specific color
// c(component, component piece) e.g. c(tab, border) to the color of border tabs
// c(component, theme, component piece) e.g. (tab, dark-theme, border) to get a themed component color value, if the themed color does not exist, the default from the component will be used instead
@function c(
  $name,
  $theme:null,
  $component:null,
) {
  // Retrieve a palette color value
  @if ($theme == null) and ($component == null) {
    @return map-get($colors, $name);
  }
    // Retrieve a component color value
  @else if ($theme != null) and ($component == null) {
    @return map-get(map-get($colors, $name), $theme);
  }
    // Retrieve a themed component color value
  @else {
    @if map_has_key(map-get(map-get($colors, $name), $theme), $component) {
      @return map-get(map-get(map-get($colors, $name), $theme), $component);
    }
    @return map-get(map-get($colors, $name), $theme);
  }
}